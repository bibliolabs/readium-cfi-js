
# NPM package file, see https://docs.npmjs.com/files/package.json
# Oh, this is CSON, not JSON ( see CoffeeScript-Object-Notation https://github.com/bevry/cson )

#####################################################################
#####################################################################

# Master source file used to generate package.json

# DEFAULT METHOD (if package.json is intact):
# npm run cson2json
#
# ALTERNATIVE METHOD (if package.json is corrupted):
# npm install cson
# node ./node_modules/cson/bin/cson2json package.cson > package.json
# Note that on some Windows terminals (e.g. GitShell),
# unfortunately the package.json file might need its encoding
# converted to UTF-no-BOM :(
# This is somehow due to the piped stdout-stdin result being UCS2-little-endian
# (yet this works just fine when the same command is invoked from
# "npm run cson2json" instead of from Node!)

#####################################################################
#####################################################################

'/*': '----------------------------------------------------------------------------'
'..': 'This package.json (JSON) is automatically generated from package.cson (CSON)'
'.-': "DO NOT invoke 'npm init' or 'npm install --save' ('--save-dev' / '--save-optional')"
'._': 'as this would overwrite / update the JSON, not the master CSON!'
'*/': '----------------------------------------------------------------------------'

#####################################################################

name: "readium-cfi-js"

version: "0.0.0"

description: "Readium - CFI javascript library"

keywords: [
    "readium"
    "epub"
    "epub3"
    "cfi"
]

author:
    name: "Readium (Daniel Weck)"
    email: "daniel.weck@gmail.com"
    url: "http://github.com/readium"

licenses: [
    type: "BSD-3-Clause"
    url: "http://opensource.org/licenses/BSD-3-Clause"
]

homepage: "http://github.com/readium/readium-cfi-js"

bugs:
    url: "http://github.com/readium/readium-cfi-js/issues"
    email: "daniel.weck@gmail.com"

repository:
    type: "git"
    url: "git://github.com/readium/readium-cfi-js.git"

#####################################################################
files: [
    
    "build-output/"
    
    "license.txt"
    
    "README.md"
]

# "main" is designed for Node/CommonJS modules, not RequireJS/AMD ones.
# See http://requirejs.org/docs/commonjs.html
# See http://requirejs.org/docs/node.html
#
#main: "build-output/readium-cfi-js.js"

#####################################################################
dependencies:

    parallelshell: 'latest'
    
    'http-server': 'latest'
#    'httpserver': 'latest'
#    'node-http-server': 'latest'
    
    opener: 'latest'

#####################################################################
devDependencies:

    requirejs: "latest"

    almond: "latest"
    
    jquery: "latest"

    "pegjs": "latest"
    
    "karma": "latest"
    "karma-chrome-launcher": "latest"
    "karma-jasmine": "latest"
    "karma-sauce-launcher": "latest"
    
    
    
    cson: "latest"

    jshint: "latest"

    glob: 'latest'

    rimraf: 'latest'

    mkdirp: 'latest'

    watch: 'latest'
    
    'live-reload': 'latest'

#####################################################################
scripts:

#=====================
    env: '
    
        env
    '
    
#=====================
    echo: '
    
        echo ""
    '

#=====================
    cson2json: '
    
        node node_modules/cson/bin/cson2json package.cson
        &&
        node node_modules/cson/bin/cson2json package.cson > package.json
    '

#=====================
    'prepare': '
        npm run
            prepare:dependencies
    '
            
#=====================
    'prepare:dependencies': '
        
        npm install
        &&
        npm update
    '
    
#=====================
    clean: '
        node --version
        &&
        npm --version
        &&
        rimraf
            build-output/*
    '

#=====================
    'prebuild': '
    
        npm run clean
    '
    
#=====================
    build: '
    
        npm run
            build:scripts
    '

#=====================
    lint: '
    
        node
            build-tools/jshint_glob.js
            js/**.js
    '

#=====================
#    'prebuild:scripts': '
#    
#        npm run
#            lint
#    '

#=====================
    'prebuild:scripts': '
    
        npm run build:scripts:peg
    '
    
#=====================
    'postbuild:scripts': '
    
        rimraf build-output/_SOURCES
    '

#=====================
    'build:scripts': '
        
        npm run build:scripts:multiple
        &&
        npm run build:scripts:single
    '
    
#=====================
    'build:scripts:peg': '
        node ./node_modules/pegjs/bin/pegjs --export-var EPUBcfiParser cfi_parser.pegjs gen/cfi_parser_gen.js
    '

#=====================
    'build:scripts:multiple': '
        node node_modules/requirejs/bin/r.js
             -o
             build-config/RequireJS_config_multiple-bundles.js
    '

#=====================
    'build:scripts:single': '
        node node_modules/requirejs/bin/r.js
             -o
             build-config/RequireJS_config_single-bundle.js
    '

#=====================
#### BLOCKING! (CTRL-C) [watch][live-reload][http]
    'example:dev': '
        npm run
            clean
        &&
        echo > open_webbrowser.js
        &&
        parallelshell
            \"npm run live-reload\"
            \"npm run watch\"
            \"npm run http\"
    '

#=====================
#### BLOCKING! (CTRL-C) [http]
    'example': '
        parallelshell
            \"npm run http\"
            \"npm run webbrowser\"
    '

#=====================
#### BLOCKING! (CTRL-C) [watch:build]
    watch: '
        parallelshell
            \"npm run watch:build\"
            \"npm run watch:test\"
    '
    
#=====================
    'watch:test': '
        node node_modules/karma/bin/karma start tests/karma.conf.js
    '

#=====================
    'test': '
       node node_modules/karma/bin/karma start tests/karma.conf.js
    '

#=====================
    'test:travis': '
       node node_modules/karma/bin/karma start tests/karma.travis.conf.js
    '

#=====================
#### BLOCKING! (CTRL-C) [watch or nodemon]
    'watch:build': '
        watch
            \"npm run build
                && node build-tools/webbrowser.js
                && npm run webbrowser
                && rimraf open_webbrowser.js\"
            build-output-usage-example/
    '
    #    nodemon -q
    #    -w build-output-usage-example/
    #    --ext \".\"
    #    --exec \"npm run build
    #            && node build-tools/webbrowser.js 
    #            && npm run webbrowser
    #            && rimraf open_webbrowser.js\"
    
#=====================
    'http': '
    
        http-server -p 9090 ./
    '

#=====================
    'live-reload': '
    
        live-reload --port 9091 --delay 1000 build-output/
    '

#=====================
    'webbrowser': '
    
        opener http://localhost:9090/build-output-usage-example/
    '
